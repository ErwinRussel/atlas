// Linux functions
int DefaultScreen(Display *display)
int DisplayWidth(Display *display, int screen_number)
int DisplayHeight(Display *display, int screen_number)
Window RootWindow(Display *display, int screen_number)

// Xlib functions
#HEADER <X11/Xlib.h>
extern Display *XOpenDisplay(_Xconst char *display_name)
extern Colormap XCreateColormap(Display* display, Window w, Visual*	visual, int	alloc )
extern Window XCreateWindow(Display* display, Window parent, int x, int y, unsigned int width, unsigned int height, unsigned int border_width, int	depth, unsigned int class, Visual* visual, unsigned long valuemask, XSetWindowAttributes* attributes)
extern Atom XInternAtom(Display *display, char *atom_name, Bool only_if_exists)
extern int XChangeProperty(Display *display, Window w, Atom property, Atom type, int format, int mode, unsigned char *data, int nelements)
extern int XSetNormalHints(Display *display, Window w, XSizeHints *hints)
extern int XSetStandardProperties(Display *display, Window w, _Xconst char *window_name, _Xconst char *icon_name, Pixmap icon_pixmap, char **argv, int argc, XSizeHints *hints)
extern int XFree(void* data)
extern int XMapWindow(Display *display, Window w)
extern int XPending(Display *display)
// todo: make the right adjustments
XEvent XNextEvent(Display *display, XEvent *event_return)
extern KeySym XLookupKeysym(XKeyEvent *key_event, int index)
extern int XLookupString(XKeyEvent *event_struct, char *buffer_return, int bytes_buffer, KeySym *keysym_return, XComposeStatus *status_in_out)
extern int XDestroyWindow(Display *display, Window w)
extern XDestroyWindow(Display* display, Window w)

// OpenGL functions
#HEADER <GL/gl.h>
const GLubyte *glGetString(	GLenum name)
void glLightfv( GLenum light, GLenum pname, const GLfloat *params )
void glEnable( GLenum cap )
GLuint glGenLists( GLsizei range )
void glNewList( GLuint list, GLenum mode )
void glMaterialfv( GLenum face, GLenum pname, const GLfloat *params )
void glEndList()
void glShadeModel( GLenum mode )
void glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz )
void glBegin( GLenum mode )
void glVertex3f( GLfloat x, GLfloat y, GLfloat z )
void glEnd()
void glViewport( GLint x, GLint y, GLsizei width, GLsizei height )
void glMatrixMode( GLenum mode )
void glLoadIdentity()
void glFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val )
void glTranslatef( GLfloat x, GLfloat y, GLfloat z )
void glDrawBuffer( GLenum mode )
void glPushMatrix()
void glPopMatrix()
void glTranslated( GLdouble x, GLdouble y, GLdouble z )
void glClear( GLbitfield mask )
void glRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z )
void glCallList( GLuint list )
void glDeleteLists( GLuint list, GLsizei range )
void glXDestroyContext( Display *dpy, GLXContext ctx )

// Glx functions
#HEADER <GL/glx.h>
XVisualInfo* glXChooseVisual(Display *dpy, int screen, int *attribList)
GLXContext glXCreateContext(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
Bool glXMakeCurrent(Display * dpy, GLXDrawable drawable, GLXContext ctx)
const char *glXQueryExtensionsString( Display *dpy, int screen )
extern void glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
extern __GLXextFuncPtr glXGetProcAddressARB (const GLubyte *procname)
void glXSwapBuffers( Display *dpy, GLXDrawable drawable )